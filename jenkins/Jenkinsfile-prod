pipeline {
    agent any

    environment {
        RESOURCE_GROUP = 'ecommerce-rg'
        AKS_NAME = 'ecommerce-aks'
        K8S_NAMESPACE = 'prod'
        VERSION = sh(script: 'git describe --tags --always', returnStdout: true).trim()
        DOCKER_REGISTRY = 'raskolnikov999.io'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    currentBuild.displayName = "#${BUILD_NUMBER} - ${VERSION}"
                }
            }
        }

        stage('Checkout & Setup') {
            steps {
                checkout scm
                sh 'git fetch --tags'
            }
        }

        stage('Login to Azure') {
            steps {
                withCredentials([azureServicePrincipal('azure-credentials')]) {
                    sh '''
                        az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                        az account show
                    '''
                }
            }
        }

        stage('Login to Docker') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin $DOCKER_REGISTRY
                    '''
                }
            }
        }

        stage('Build & Unit Tests') {
            steps {
                sh './mvnw clean package'
                junit '**/target/surefire-reports/*.xml'
                archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    def services = ['service1', 'service2', 'service3'] // Reemplazar con tus microservicios
                    services.each { service ->
                        sh """
                            docker build -t $DOCKER_REGISTRY/${service}:${VERSION} -f ${service}/Dockerfile ${service}/
                            docker push $DOCKER_REGISTRY/${service}:${VERSION}
                        """
                    }
                }
            }
        }

        stage('Generate Release Notes') {
            steps {
                script {
                    def changelog = sh(script: 'git log --pretty=format:"%h - %an, %ar : %s" --since="1 week ago"', returnStdout: true).trim()
                    def releaseNotes = """
                    Release ${VERSION} - ${new Date().format('yyyy-MM-dd')}
                    =====================================
                    
                    Changes:
                    ${changelog}
                    
                    Deployment Notes:
                    - Kubernetes Namespace: ${K8S_NAMESPACE}
                    - Cluster: ${AKS_NAME}
                    - Version: ${VERSION}
                    """
                    writeFile file: 'RELEASE_NOTES.md', text: releaseNotes
                    archiveArtifacts artifacts: 'RELEASE_NOTES.md', fingerprint: true
                }
            }
        }

        stage('Configure Kubernetes') {
            steps {
                sh """
                    az aks get-credentials --resource-group "$RESOURCE_GROUP" --name "$AKS_NAME" --overwrite-existing
                    kubectl apply -f k8s/master/namespace.yml
                """
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def services = ['user-service', 'product-service', 'order-service', 'payment-service', 'favourite-service', 'shipping-service']
                    services.each { service ->
                        sh """
                            kubectl apply -f k8s/master/${service}-deployment.yml -n $K8S_NAMESPACE
                            kubectl set image deployment/${service} ${service}=$DOCKER_REGISTRY/${service}:${VERSION} -n $K8S_NAMESPACE
                        """
                    }
                }
            }
        }

        stage('System Tests') {
            steps {
                sh """
                    kubectl apply -f k8s/newman/newman-job.yml -n $K8S_NAMESPACE
                    kubectl wait --for=condition=complete job/newman-integration-tests --timeout=300s -n $K8S_NAMESPACE || {
                        echo "System tests failed"
                        exit 1
                    }
                    
                    NEWMAN_POD=$(kubectl get pods -n $K8S_NAMESPACE -l job-name=newman-integration-tests -o jsonpath='{.items[0].metadata.name}')
                    kubectl logs $NEWMAN_POD -n $K8S_NAMESPACE > newman-logs.txt
                """
                archiveArtifacts artifacts: 'newman-logs.txt', fingerprint: true
            }
        }

        stage('Verify Deployment') {
            steps {
                sh """
                    for deployment in $(kubectl get deployments -n $K8S_NAMESPACE -o jsonpath='{.items[*].metadata.name}'); do
                        kubectl rollout status deployment/$deployment -n $K8S_NAMESPACE --timeout=300s
                    done
                """
            }
        }
    }

    post {
        always {
            script {
                // Limpieza
                sh 'kubectl delete job newman-integration-tests -n $K8S_NAMESPACE || true'
                
                // Notificaci√≥n
                if (currentBuild.result == 'SUCCESS') {
                    emailext subject: "SUCCESS: Pipeline ${currentBuild.fullDisplayName}",
                            body: "Deployment to master completed successfully.\n\n${readFile('RELEASE_NOTES.md')}",
                            to: 'devops-team@yourcompany.com'
                } else {
                    emailext subject: "FAILED: Pipeline ${currentBuild.fullDisplayName}",
                            body: "Pipeline failed. Please check: ${BUILD_URL}",
                            to: 'devops-team@yourcompany.com'
                }
            }
            deleteDir()
        }
    }
}